<?php
// $Id: xmlsitemap_taxonomy.install,v 1.1.2.15 2009/05/25 18:32:48 kiam Exp $

/**
 * @file
 * Installation file for XML sitemap term.
 */

/*****************************************************************************
 * Drupal hooks.
 ****************************************************************************/

/**
 * Implementation of hook_enable().
 */
function xmlsitemap_taxonomy_enable() {
  xmlsitemap_flag_sitemap(TRUE);
}

/**
 * Implementation of hook_disable().
 */
function xmlsitemap_taxonomy_disable() {
  xmlsitemap_flag_sitemap(TRUE);
}

/**
 * Implementation of hook_schema().
 */
function xmlsitemap_taxonomy_schema() {
  $schema['xmlsitemap_taxonomy'] = array(
    'description' => 'The list of the taxonomy terms added to the sitemap.',
    'fields' => array(
      'mid' => array(
        'description' => 'The primary key.',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'pdata' => array(
        'description' => 'The taxonomy term ID.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'sdata' => array(
        'description' => 'The vocabulary ID.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'status' => array(
        'description' => 'Boolean indicating whether or not this node is enabled.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
      ),
      'previously_changed' => array(
        'description' => 'The Unix timestamp of the previous change.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp of the last change.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'priority' => array(
        'description' => 'The priority in the sitemap.',
        'type' => 'float',
        'not null' => TRUE,
        'default' => 0.5,
      ),
      'priority_override' => array(
        'description' => 'The value that override the normal priority.',
        'type' => 'float',
        'not null' => TRUE,
        'default' => -2.0,
      ),
    ),
    'indexes' => array(
      'link_status' => array('status'),
      'link_changed' => array('changed'),
      'link_priority' => array('priority'),
    ),
    'unique keys' => array(
      'link_pdata' => array('pdata'),
    ),
    'primary key' => array('mid'),
  );
  return $schema;
}

/**
 * Implementation of hook_install().
 */
function xmlsitemap_taxonomy_install() {
  drupal_install_schema('xmlsitemap_node');
  db_query("UPDATE {system} SET weight = 10 WHERE name = 'xmlsitemap_taxonomy'");
}

/**
 * Implementation of hook_update_N().
 * Updates the SQL tables.
 */
function xmlsitemap_taxonomy_update_6000() {
  $ret = array();
  if (db_table_exists('xmlsitemap_term')) {
    db_drop_table($ret, 'xmlsitemap_term');
  }
  if (db_table_exists('xmlsitemap_taxonomy')) {
    db_drop_table($ret, 'xmlsitemap_taxonomy');
  }
  foreach(xmlsitemap_taxonomy_schema() as $table => $definition) {
    db_create_table($ret, $table, $definition);
  }
  return $ret;
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_taxonomy_update_6106() {
  $ret[] = update_sql("UPDATE {system} SET weight = 10 WHERE name = 'xmlsitemap_taxonomy'");
  return $ret;
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_taxonomy_update_6107() {
  return xmlsitemap_taxonomy_update_6000();
}

/**
 * Implementation of hook_update_N().
 *
 */
function xmlsitemap_taxonomy_update_6114() {
  $ret = array();
  $result = db_query("SELECT name FROM {variable} WHERE name LIKE 'xmlsitemap\_term\_%'");
  while ($name = db_result($result)) {
    $new_name = str_replace('_term_', '_taxonomy_', $name);
    $ret[] = update_sql("UPDATE {variable} set name = '$new_name' WHERE name = '$name'");
  }
  return $ret;
}

/**
 * Implementation of hook_update_N().
 *
 */
function xmlsitemap_taxonomy_update_6115() {
  return xmlsitemap_taxonomy_update_6000();
}

/**
 * Implementation of hook_uninstall().
 */
function xmlsitemap_taxonomy_uninstall() {
  drupal_uninstall_schema('xmlsitemap_taxonomy');
  db_query("DELETE FROM {variable} WHERE name LIKE 'xmlsitemap\_taxonomy\_%'");
}
