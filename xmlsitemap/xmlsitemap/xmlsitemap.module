<?php
// $Id: xmlsitemap.module,v 1.1.2.128 2009/05/25 12:01:33 kiam Exp $

/**
 * @file
 * Creates a sitemap compatible with the sitemaps.org schema.
 */

/**
 * @addtogroup xmlsitemap
 * @{
 */

/*****************************************************************************
 * Public constants.
 ****************************************************************************/

/**
 * The timestamp of server request to avoid repeatedly generating value.
 */
if (!defined('REQUEST_TIME')) {
  if (isset($_SERVER['REQUEST_TIME'])) {
    define('REQUEST_TIME', $_SERVER['REQUEST_TIME']);
  }
  else {
    define('REQUEST_TIME', time());
  }
}

/**
 * The date format used in the sitemap.
 */
define('XMLSITEMAP_DATE_W3C', 'Y-m-d\TH:i:s\Z');

/*****************************************************************************
 * Drupal hooks.
 ****************************************************************************/

/**
 * Implementation of hook_form_alter().
 */
function xmlsitemap_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'locale_languages_configure_form':
    case 'path_admin_form':
    case 'pathauto_admin_settings':
    case 'system_clean_url_settings':
      $form['#submit'][] = 'xmlsitemap_settings_submit';
      break;
  }
}

/**
 * Implementation of hook_help().
 */
function xmlsitemap_help($path, $arg) {
  switch ($path) {
    case 'admin/settings/xmlsitemap':
    case 'admin/settings/xmlsitemap/additional':
    case 'admin/settings/xmlsitemap/engines':
    case 'admin/settings/xmlsitemap/tools':
      $output = t('The sitemap is located at <a href="@sitemap">@sitemap</a>.', array('@sitemap' => url('sitemap.xml', array('absolute' => TRUE))));
      break;
    case 'admin/help#xmlsitemap':
      $output = '<p>'. t('XML sitemap automatically creates a sitemap that conforms to the <a href="@sitemaps.org">sitemaps.org specification</a>. This helps search engines keep their search results up to date.', array('@sitemaps.org' => 'http://www.sitemaps.org')) .'</p>';
      $output .= '<h3>'. t('Supporting modules') .'</h3>';
      $output .= '<p>'. t('By itself, the XML sitemap module adds only the front page of your site to the sitemap. Other types of links are handled by supporting modules.') .'</p>';
      $optional = '';
      foreach (module_implements('xmlsitemap_description', TRUE) as $module) {
        $description = module_invoke($module, 'xmlsitemap_description');
        if (!empty($description)) {
          $optional .= $description;
        }
      }
      if (!empty($optional)) {
        $output .= "<dl>$optional</dl>";
      }
      $output .= '<p>'. t('Links may be assigned a priority between 0.0 and 1.0. The default priority is 0.5. A priority of <em>Not in sitemap</em> excludes a link from the sitemap.') .'</p>';
      $output .= '<p>'. t('More information is available in the <a href="@module_docs">XML sitemap documentation</a>.', array('@module_docs' => 'http://drupal.org/handbook/modules/gsitemap')) .'</p>';
      break;
    default:
      $output = '';
      break;
  }
  return $output;
}

/**
 * Implementation of hook_menu().
 */
function xmlsitemap_menu() {
  $items = array();
  $access_config = array('administer site configuration');
  $access_content = array('access content');
  $items['admin/settings/xmlsitemap'] = array(
    'title' => 'XML sitemap',
    'description' => 'Configure the XML sitemap.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xmlsitemap_settings'),
    'access arguments' => $access_config,
    'file' => 'xmlsitemap.admin.inc',
  );
  $items['admin/settings/xmlsitemap/sitemap'] = array(
    'title' => 'Sitemap',
    'description' => 'Configure the XML sitemap.',
    'weight' => -1,
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'xmlsitemap.admin.inc',
  );
  $items['admin/settings/xmlsitemap/additional'] = array(
    'title' => 'Additional links',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xmlsitemap_additional_links'),
    'access arguments' => $access_config,
    'type' => MENU_LOCAL_TASK,
    'file' => 'xmlsitemap.admin.inc',
  );
  $items['admin/settings/xmlsitemap/additional/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/settings/xmlsitemap/additional/add'] = array(
    'title' => 'Add link',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xmlsitemap_additional_links_edit'),
    'access arguments' => $access_config,
    'type' => MENU_LOCAL_TASK,
    'file' => 'xmlsitemap.admin.inc',
  );
  $items['admin/settings/xmlsitemap/tools'] = array(
    'title' => 'Tools',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xmlsitemap_tools'),
    'access arguments' => $access_config,
    'type' => MENU_LOCAL_TASK,
    'file' => 'xmlsitemap.admin.inc',
  );
  $items['admin/settings/xmlsitemap/additional/delete/%xmlsitemap_additional'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xmlsitemap_additional_links_delete_confirm', 5),
    'access arguments' => $access_config,
    'parent' => 'admin/settings/xmlsitemap/additional/list',
    'type' => MENU_CALLBACK,
    'file' => 'xmlsitemap.admin.inc',
  );
  $items['admin/settings/xmlsitemap/additional/edit/%xmlsitemap_additional'] = array(
    'title' => 'Edit link',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xmlsitemap_additional_links_edit', 5),
    'access arguments' => $access_config,
    'parent' => 'admin/settings/xmlsitemap/additional/list',
    'type' => MENU_CALLBACK,
    'file' => 'xmlsitemap.admin.inc',
  );
  $items['sitemap.xml'] = array(
    'title' => 'Sitemap index',
    'page callback' => 'xmlsitemap_output_index',
    'access arguments' => $access_content,
    'type' => MENU_CALLBACK,
    'file' => 'xmlsitemap.pages.inc',
  );
  for ($chunk = 0; $chunk < xmlsitemap_chunk_count(); ++$chunk) {
    $items["sitemap-$chunk.xml"] = array(
      'title' => 'Sitemap !number',
      'title arguments' => array('!number' => $chunk),
      'page callback' => 'xmlsitemap_output_chunk',
      'page arguments' => array((string) $chunk),
      'access arguments' => $access_content,
      'type' => MENU_CALLBACK,
      'file' => 'xmlsitemap.pages.inc',
    );
  }
  return $items;
}

/**
 * Implementation of hook_perm().
 */
function xmlsitemap_perm() {
  return array('override node settings', 'override profile settings');
}

/**
 * Implementation of hook_robotstxt().
 */
function xmlsitemap_robotstxt() {
  return array("Sitemap: ". url('sitemap.xml', array('absolute' => TRUE)));
}

/**
 * Implementation of hook_theme().
 */
function xmlsitemap_theme() {
  return array(
    'xmlsitemap_additional_links' => array(
      'arguments' => array('form' => array()),
      'file' => 'xmlsitemap.admin.inc',
    )
  );
}

/**
 * Implementation of hook_xmlsitemap_link_count().
 */
function xmlsitemap_xmlsitemap_link_count() {
  $query = "SELECT COUNT(*) FROM {xmlsitemap_additional} WHERE status = %d";
  return 1 + db_result(db_query($query, TRUE));
}

/**
 * Implementation of hook_xmlsitemap_links().
 */
function xmlsitemap_xmlsitemap_links($fp, $from, $count = 0) {
  $link = new stdClass();
  $link->loc = url(NULL, array('absolute' => TRUE));
  $changed = variable_get('xmlsitemap_front_page_changed', -1);
  $changefreq = variable_get('xmlsitemap_front_page_changefreq', 3600);
  if ($changed == -1 || REQUEST_TIME - $changed > $changefreq) {
    $changed = REQUEST_TIME;
    variable_set('xmlsitemap_front_page_changed', REQUEST_TIME);
  }
  $link->changed = $changed;
  $link->changefreq = $changefreq;
  $link->priority = variable_get('xmlsitemap_front_page_priority', 1.0);
  xmlsitemap_output_link($fp, $link);
  $query = "SELECT * FROM {xmlsitemap_additional} WHERE status = %d ORDER BY changed DESC, previously_changed DESC";
  if ($count) {
    $result = db_query_range($query, TRUE, $from, $count);
  }
  else {
    $result = db_query($query, TRUE);
  }
  while (--$count > 0 && ($row = db_fetch_object($result))) {
    $changefreq = max($row->changed - $row->previously_changed, REQUEST_TIME - $row->changed);
    $link->loc = url($row->pdata, array('absolute' => TRUE));
    $link->changed = $row->changed;
    $link->changefreq = $changefreq;
    xmlsitemap_output_link($fp, $link);
  }
}

/*****************************************************************************
 * Public functions.
 ****************************************************************************/

/**
 * Load the additional link with the passed ID.
 * @param $lid
 *   The ID of the additional link to load from the database.
 * @return
 *   An additional link object, or FALSE.
 */
function xmlsitemap_additional_load($mid) {
  return db_fetch_object(db_query("SELECT * FROM {xmlsitemap_additional} WHERE mid = %d", $mid));
}

function xmlsitemap_cache_filename($chunk) {
  global $base_url, $language;
  $filename = '';
  $chunks_info= variable_get('xmlsitemap_sitemap_chunks_info', array());
  $md5 = substr(md5($base_url), 0, 8);
  foreach ($chunks_info as $module => $info) {
    // if first chunk is less than zero, the module is not enabled.
    if ($info['first chunk'] < 0) {
      continue;
    }
    if (empty($info['chunks'])) {
      continue;
    }
    if ($chunk < $info['first chunk']) {
      break;
    }
    if ($chunk >= $info['first chunk'] && $chunk <= $info['first chunk'] + $info['chunks'] - 1) {
      $delta = $chunk - $info['first chunk'];
      return $md5 . $info['id'] . $delta . $language->language .'.xml';
    }
  }
  return '';
}

/**
 * Return the number of chunks that are present in the sitemap.
 * @param $reset
 *   TRUE, if the cached value must be recalculated.
 * @return
 *   The number of chunks the sitemap is made of.
 */
function xmlsitemap_chunk_count($reset = FALSE) {
  static $chunk_count;
  if (!isset($chunk_count) || $reset) {
    $chunk_size = variable_get('xmlsitemap_chunk_size', 1000);
    $chunks_info = variable_get('xmlsitemap_sitemap_chunks_info', array());
    $link_count = 0;
    $module_count = 0;
    foreach(module_implements('xmlsitemap_link_count') as $module) {
      if (!isset($chunks_info[$module]['id'])) {
        $chunks_info[$module]['id'] = substr(md5($module), 0, 8);
      }
      $result = module_invoke($module, 'xmlsitemap_link_count');
      $count = empty($result) ? 0 : $result;
      if (!isset($info['links']) && $info['links'] != $count) {
        $chunks_info[$module]['needs update'] = TRUE;
      }
      elseif (!isset($chunks_info[$module]['needs update'])) {
        $chunks_info[$module]['needs update'] = FALSE;
      }
      $chunks_info[$module]['links'] = $count;
      $link_count += $count;
      $module_count++;
    }
    $chunk_count = (integer) ($link_count / $chunk_size);
    // Adjust the chunk count because each module will not share its own
    // chunks with the other modules.
    $chunk_count += $module_count;
    if ($chunk_count > 1000) {
      $new_size = (integer) ceil($link_count / 100000) * 100;
      // Set which modules needs to update their cache files.
      foreach ($chunks_info as $module => $info) {
        if (!empty($info['links']) && $info['links'] > $old_size) {
          $chunks_info[$module]['needs update'] = TRUE;
        }
        elseif (!isset($chunks_info[$module]['needs update'])) {
          $chunks_info[$module]['needs update'] = FALSE;
        }
      }
      variable_set('xmlsitemap_chunk_size', $new_size);
      $chunk_size = $new_size;
    }
    $chunk_count = 0;
    foreach ($chunks_info as $module => $info) {
      // If a module is not enabled, its links will not be added to the
      // sitemap.
      if (!module_exists($module)) {
        $chunks_info[$module]['first chunk'] = -1;
      }
      else {
        $chunks_info[$module]['chunks'] = $chunks = ceil($info['links'] / $chunk_size);
        if ($chunks) {
          $chunks_info[$module]['first chunk'] = $chunk_count;
          $chunk_count += $chunks;
        }
        else {
          $chunks_info[$module]['first chunk'] = -1;
        }
      }
    }
    variable_set('xmlsitemap_sitemap_chunks_info', $chunks_info);
  }
  return $chunk_count;
}

/**
 * Mark the sitemap as changed, and the cache as needing update.
 * @param $value
 *   The value to set the flag to.
 * @param $module
 *   The module that changed the sitemap.
 */
function xmlsitemap_flag_sitemap($value = FALSE, $module = NULL) {
  if (variable_get('xmlsitemap_ping_sitemap', FALSE) != $value) {
    variable_set('xmlsitemap_ping_sitemap', TRUE);
  }
  if ($value) {
    xmlsitemap_chunk_count(TRUE);
  }
}

/**
 * Output the sitemap XML data for the passed link.
 * @param $fp
 *   The file resource for the file to write, or = if the output is printed
 *   on the screen.
 * @param $link
 *   The object containing the data to print.
 */
function xmlsitemap_output_link($fp, $link) {
  $template = <<<EOC
  <url>
    <loc>%loc</loc>
    <lastmod>%lastmod</lastmod>
    <changefreq>%changefreq</changefreq>
    <priority>%priority</priority>
  </url>

EOC;
  $trans = array(
    '%loc' => check_url($link->loc),
    '%lastmod' => gmdate(XMLSITEMAP_DATE_W3C, $link->changed),
    '%changefreq' => xmlsitemap_sitemap_frequency($link->changefreq),
    '%priority' => number_format($link->priority, 1),
  );
  $output = strtr($template, $trans);
  if ($fp) {
    fwrite($fp, $output);
  }
  else {
    print $output;
  }
}

/**
 * Return an array of sitemap priority options.
 * @param $option
 *  If not given, the array will include priority values from 0.0 to 1.0.
 * - exclude: Add option to exclude item from sitemap.
 * - default: Add option to use default priority. Only for cases where a
 *   default priority exists.
 * - both: Add both the default and exclude options.
 * @return
 *  An array of priority options.
 */
function xmlsitemap_priority_options($exclude = FALSE, $default = FALSE) {
  $options = array(
    '1.0' => t('1.0'),
    '0.9' => t('0.9'),
    '0.8' => t('0.8'),
    '0.7' => t('0.7'),
    '0.6' => t('0.6'),
    '0.5' => t('0.5'),
    '0.4' => t('0.4'),
    '0.3' => t('0.3'),
    '0.2' => t('0.2'),
    '0.1' => t('0.1'),
    '0.0' => t('0.0'),
  );
  if ($exclude) {
    $options['-1'] = t('Not in sitemap');
  }
  if ($default) {
    $options['-2'] = t('Default');
  }
  return $options;
}

/**
 * Determine the frequency of updates to a link.
 * @param $interval
 *  The number of seconds since the last change, or the number of seconds
 *  between the last change, and the previous change.
 * @return
 *  A string representing the update frequency according to the sitemaps.org
 *  protocol.
 */
function xmlsitemap_sitemap_frequency($interval) {
  $frequencies = array(
    'always' => 3600,
    'hourly' => 86400,
    'daily' => 604800,
    'weekly' => 2419200,
    'monthly' => 29030400,
    'yearly' => 100000000,
  );
  if ($interval < 0 || !is_numeric($interval)) {
    return 'never';
  }
  foreach ($frequencies as $frequency => $value) {
    if ($interval < $value) {
      break;
    }
  }
  return $frequency;
}

/**
 * Return an array used to add additional form fields in the user form.
 */
function xmlsitemap_user_form_fieldset() {
  static $done = FALSE;
  $form = array();
  if (!$done) {
    $form['xmlsitemap'] = array(
      '#type' => 'fieldset',
      '#title' => t('XML sitemap'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#access' => user_access('override profile settings') || user_access('administer users'),
      '#weight' => 7,
    );
    $done = TRUE;
  }
  return $form;
}

/**
 * Write data in the sitemap table. This is an altered version of
 * drupal_write_record() adapted for the specific case.
 * @param $link
 *   The object containing the data to be written in the database table.
 * @return
 *   FALSE, if the data have not be written in the database.
 */
function xmlsitemap_write_link(&$link, $table, $module = NULL) {
  // If the module name is not given, use the table name.
  if (empty($table)) {
    return FALSE;
  }
  if (empty($module)) {
    $module = $table;
  }
  // Retrieve the default values, and use them for the object properties that
  // have not been set; serial type fields are ignored.
  $schema = drupal_get_schema($table);
  if (empty($schema)) {
    return FALSE;
  }
  // Fill in defaults for fields that are not set.
  foreach ($schema['fields'] as $field => $info) {
    if (!isset($link->$field) && isset($info['default'])) {
      $link->$field = $info['default'];
    }
  }
  // Allow third-party modules to alter the data being saved.
  drupal_alter('xmlsitemap_link', $link, $module);
  // Verify if there is already a row that refers to the same link.
  $condition = "pdata = ". db_type_placeholder($schema['fields']['pdata']['type']);
  $row = db_fetch_object(db_query("SELECT * FROM {". $table ."} WHERE ". $condition, $link->pdata));
  $update = ($row !== FALSE);
  // Don't write a new row if status is FALSE.
  if (!($update || $link->status)) {
    return FALSE;
  }
  if ($update) {
    $link->mid = $row->mid;
    if ($link->changed > $row->changed) {
      $link->previously_changed = $row->changed;
    }
    else {
      $link->previously_changed = $row->previously_changed;
      $link->changed = $row->changed;
    }
  }
  $fields = $defs = $values = $serials = $placeholders = array();
  foreach ($schema['fields'] as $field => $info) {
    if ($info['type'] == 'serial') {
      $serials[] = $field;
      // Ignore values for serials when inserting data.
      if (!$update) {
        unset($link->$field);
      }
    }
    if (isset($link->$field)) {
      $fields[] = $field;
      $placeholders[] = db_type_placeholder($info['type']);
      $values[] = $link->$field;
    }
  }
  $query = '';
  if (!$update) {
    $query = "INSERT INTO {". $table ."} (". implode(', ', $fields) .') VALUES ('. implode(', ', $placeholders) .')';
    $return = SAVED_NEW;
  }
  else {
    $query = '';
    foreach ($fields as $id => $field) {
      if ($query) {
        $query .= ', ';
      }
      $query .= $field .' = '. $placeholders[$id];
    }
    $condition = "pdata = ". db_type_placeholder($schema['fields']['pdata']['type']);
    $values[] = $link->pdata;
    $query = "UPDATE {". $table ."} SET $query WHERE ". $condition;
    $return = SAVED_UPDATED;
  }
  // Execute the SQL.
  if (db_query($query, $values)) {
    if ($serials) {
      // Get last insert ids and fill them in.
      foreach ($serials as $field) {
        $link->$field = db_last_insert_id($table, $field);
      }
    }
    xmlsitemap_flag_sitemap(TRUE, $module);
  }
  else {
    $return = FALSE;
  }
  return $return;
}

/*****************************************************************************
 * Private functions.
 ****************************************************************************/

/**
 * Return the list of all additional links created.
 */
function _xmlsitemap_additional_links_list() {
  static $links;
  if (!isset($links)) {
    $links = array();
    $result = db_query("SELECT * FROM {xmlsitemap_additional} ORDER BY priority ASC");
    while ($link = db_fetch_object($result)) {
      $links[$link->mid] = $link;
    }
  }
  return $links;
}

/**
 * Shutdown function for cron cleanup.
 * @see drupal_cron_cleanup().
 */
function _xmlsitemap_cron_cleanup() {
  // See if the semaphore is still locked.
  if (variable_get('xmlsitemap_cron_semaphore', FALSE)) {
    watchdog('xmlsitemap', 'Cache files building task exceeded the time limit and was aborted.', array(), WATCHDOG_WARNING);
    // Release cron semaphore
    variable_del('xmlsitemap_cron_semaphore');
  }
}

function _xmlsitemap_cron_semaphore() {
  if ($semaphore = variable_get('xmlsitemap_cron_semaphore', FALSE)) {
    if (REQUEST_TIME - $semaphore > 3600) {
      // Either the task has been running for more than an hour or the semaphore
      // was not reset due to a database error.
      watchdog('xmlsitemap', 'The cache files building task has been running for more than an hour and is most likely stuck.', array(), WATCHDOG_ERROR);
      // Release cron semaphore
      variable_del('xmlsitemap_cron_semaphore');
    }
    else {
      // The task is still running normally.
      watchdog('xmlsitemap', 'Attempting to re-run the cache files building task while it is already running.', array(), WATCHDOG_WARNING);
    }
    return $semaphore;
  }
  return FALSE;
}

/**
 * @} End of "addtogroup xmlsitemap".
 */
